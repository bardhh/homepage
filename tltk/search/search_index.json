{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Welcome to the Temporal Logic Toolkit (TLTk) page. TLTk enables fast robustness computation of MTL specifications. In the follow sections we provide instructions for running the tool and useful example scripts.","title":"Home"},{"location":"#home","text":"Welcome to the Temporal Logic Toolkit (TLTk) page. TLTk enables fast robustness computation of MTL specifications. In the follow sections we provide instructions for running the tool and useful example scripts.","title":"Home"},{"location":"examples/","text":"Examples MTL Formulas The TLTk uses python objects to represent MTL operations. The currently supported MTL operarations are: Predicate Definition: MTL . Predicate ( dataName , AMatrix , bMatrix ) The predicate is defined as a polyhedron in the form Ax \u2264 b. For higher diminsional problems dataName can be a list of names and TLTk will zip those rows together. It is recommended to have the data in the correct format before hand and not zip for speed. For example, we can define speedPred = Predicate ( 'speed' , AMatrix , bMatrix ) rpmPred = Predicate ( 'rpm' , AMatrix , bMatrix ) MTL Operators Not: phi = MTL . Not ( speedPred ) And: phi = MTL . And ( speedPred , rpmPred ) Or: phi = MTL . Or ( speedPred , rpmPred ) Next: phi = MTL . Next ( speedPred ) Eventually: phi = MTL . Finally ( lowerTimeBound , upperTimeBound , Subformula ) The first argument is the lower time bound. The second argument is the upper time bound and can be float(\u2019inf\u2019) to represent infinity. The third argument is either a predicate or another MTL operation. Always: phi = MTL . Globaly ( lowerTimeBound , upperTimeBound , Subformula ) The first argument is the lower time bound. The second argument is the upper time bound and can be float(\u2019inf\u2019) to represent infinity. The third argument is either a predicate or another MTL formula. Until: phi = MTL . Until ( lowerTimeBound , upperTimeBound , Subformula1 , Subformula2 ) The first argument is the lower time bound. The second argument is the upper time bound and can be float(\u2019inf\u2019) to represent infinity. The third argument is either a predicate or another MTL operation. The fourth argument is either a predicate or another MTL formula. Simple MTL Formula Example We define a simple predicate as follows: r1 = MTL . Predicate ( 'data1' , [ 1 , 1 ], [ 150 ]) Mathematically, this defines the set: r1: \\begin{bmatrix} 1 & 1 \\end{bmatrix} \\begin{bmatrix} x_1 \\\\ x_2 \\end{bmatrix} \\le 150 r1: \\begin{bmatrix} 1 & 1 \\end{bmatrix} \\begin{bmatrix} x_1 \\\\ x_2 \\end{bmatrix} \\le 150 Where x_1 x_1 and x_2 x_2 are the signals the trajectory is defined over. We define the MTL formula \\varphi=F_{[0,3.14]} (r1) \\varphi=F_{[0,3.14]} (r1) as: phi = MTL . Finally ( 0 , 3.14 , r1 ) Getting Started Script The script can be found in tltk/gettingStarted/hello-tltk-rob.py First, we import the python libraries import sys import os import tltk_mtl as MTL import numpy as np import time Then, we define the options. In this case, we set the computation mode to cpu_threaded. ## Options mode = 'cpu_threaded' Next, we define the predicates and MTL formula for \\varphi=\\neg(F_{[0,\\infty]}(speed>160 \\wedge rpm>4500)) \\varphi=\\neg(F_{[0,\\infty]}(speed>160 \\wedge rpm>4500)) ## Predicates and Formulas Ar1 = - 1 br1 = - 160 r1 = MTL . Predicate ( 'data1' , Ar1 , br1 ) root = MTL . Not ( MTL . Finally ( 0 , float ( 'inf' ), r1 )) Ar2 = - 1 br2 = - 4500 r2 = MTL . Predicate ( 'data2' , Ar2 , br2 ) # root = F(r1 /\\ r2) root = MTL . Not ( MTL . Finally ( 0 , float ( 'inf' ), MTL . And ( r1 , r2 ))) After, we set the system output trace and time stamps. ## Trace and Time Stamps #trace defined as a dictionary traces = { 'data1' : np . ones ( 10 , dtype = np . float32 ) * 5 , 'data2' : np . ones ( 10 , dtype = np . float32 ) * 10 } time_stamps = np . arange ( 1 , 10 + 1 , dtype = np . float32 ) Finally, we compute and print the robustness of the trace with respect to the MTL specification. ## Evaluate Robustness t0 = time . time () root . eval_interval ( traces , time_stamps ) t1 = time . time () print ( \"TLTk\" , \" \\t | Mode:\" , mode , ' \\t | Time: ' , ' %.4f ' % ( t1 - t0 ), ' \\t | Robustness:' , root . robustness ) Falsification Example We will run the falsification script found in tltk/experiments/falsification/AT1.py First, we import the python libraries import matlab.engine import sys sys . path . insert ( 1 , '../../' ) import numpy as np import tltk import tltk_mtl as MTL Note that this script requires a matlab installation on the system. In addtion, the matlab python package should be configured. We define the model and simulation parameters: model = 'models/sldemo_autotrans_mod01' model_outputs = [ 'speed' , 'rpm' , 'gear' ] step = 0.05 inp_range = [ 0 , 100 ] simulation_time = 30 opt = [ 'simulink' , step , inp_range , simulation_time , model_outputs ] interpolation = 'pconst' mode = 'cpu_threaded' The specification: r1 = MTL . Predicate ( 'speed' , 1 , 120 ) predicates = [ r1 ] The control points for the input signal: cp_bounds = [( 0 , 100 ) for i in range ( 7 )] Finally, we run the falsification algorithm: root = MTL . Global ( 0 , 20 , r1 ) results = tltk . falsify ( model , interpolation , cp_bounds , predicates , root , opt )","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#mtl-formulas","text":"The TLTk uses python objects to represent MTL operations. The currently supported MTL operarations are:","title":"MTL Formulas"},{"location":"examples/#predicate-definition","text":"MTL . Predicate ( dataName , AMatrix , bMatrix ) The predicate is defined as a polyhedron in the form Ax \u2264 b. For higher diminsional problems dataName can be a list of names and TLTk will zip those rows together. It is recommended to have the data in the correct format before hand and not zip for speed. For example, we can define speedPred = Predicate ( 'speed' , AMatrix , bMatrix ) rpmPred = Predicate ( 'rpm' , AMatrix , bMatrix )","title":"Predicate Definition:"},{"location":"examples/#mtl-operators","text":"Not: phi = MTL . Not ( speedPred ) And: phi = MTL . And ( speedPred , rpmPred ) Or: phi = MTL . Or ( speedPred , rpmPred ) Next: phi = MTL . Next ( speedPred ) Eventually: phi = MTL . Finally ( lowerTimeBound , upperTimeBound , Subformula ) The first argument is the lower time bound. The second argument is the upper time bound and can be float(\u2019inf\u2019) to represent infinity. The third argument is either a predicate or another MTL operation. Always: phi = MTL . Globaly ( lowerTimeBound , upperTimeBound , Subformula ) The first argument is the lower time bound. The second argument is the upper time bound and can be float(\u2019inf\u2019) to represent infinity. The third argument is either a predicate or another MTL formula. Until: phi = MTL . Until ( lowerTimeBound , upperTimeBound , Subformula1 , Subformula2 ) The first argument is the lower time bound. The second argument is the upper time bound and can be float(\u2019inf\u2019) to represent infinity. The third argument is either a predicate or another MTL operation. The fourth argument is either a predicate or another MTL formula.","title":"MTL Operators"},{"location":"examples/#simple-mtl-formula-example","text":"We define a simple predicate as follows: r1 = MTL . Predicate ( 'data1' , [ 1 , 1 ], [ 150 ]) Mathematically, this defines the set: r1: \\begin{bmatrix} 1 & 1 \\end{bmatrix} \\begin{bmatrix} x_1 \\\\ x_2 \\end{bmatrix} \\le 150 r1: \\begin{bmatrix} 1 & 1 \\end{bmatrix} \\begin{bmatrix} x_1 \\\\ x_2 \\end{bmatrix} \\le 150 Where x_1 x_1 and x_2 x_2 are the signals the trajectory is defined over. We define the MTL formula \\varphi=F_{[0,3.14]} (r1) \\varphi=F_{[0,3.14]} (r1) as: phi = MTL . Finally ( 0 , 3.14 , r1 )","title":"Simple MTL Formula Example"},{"location":"examples/#getting-started-script","text":"The script can be found in tltk/gettingStarted/hello-tltk-rob.py First, we import the python libraries import sys import os import tltk_mtl as MTL import numpy as np import time Then, we define the options. In this case, we set the computation mode to cpu_threaded. ## Options mode = 'cpu_threaded' Next, we define the predicates and MTL formula for \\varphi=\\neg(F_{[0,\\infty]}(speed>160 \\wedge rpm>4500)) \\varphi=\\neg(F_{[0,\\infty]}(speed>160 \\wedge rpm>4500)) ## Predicates and Formulas Ar1 = - 1 br1 = - 160 r1 = MTL . Predicate ( 'data1' , Ar1 , br1 ) root = MTL . Not ( MTL . Finally ( 0 , float ( 'inf' ), r1 )) Ar2 = - 1 br2 = - 4500 r2 = MTL . Predicate ( 'data2' , Ar2 , br2 ) # root = F(r1 /\\ r2) root = MTL . Not ( MTL . Finally ( 0 , float ( 'inf' ), MTL . And ( r1 , r2 ))) After, we set the system output trace and time stamps. ## Trace and Time Stamps #trace defined as a dictionary traces = { 'data1' : np . ones ( 10 , dtype = np . float32 ) * 5 , 'data2' : np . ones ( 10 , dtype = np . float32 ) * 10 } time_stamps = np . arange ( 1 , 10 + 1 , dtype = np . float32 ) Finally, we compute and print the robustness of the trace with respect to the MTL specification. ## Evaluate Robustness t0 = time . time () root . eval_interval ( traces , time_stamps ) t1 = time . time () print ( \"TLTk\" , \" \\t | Mode:\" , mode , ' \\t | Time: ' , ' %.4f ' % ( t1 - t0 ), ' \\t | Robustness:' , root . robustness )","title":"Getting Started Script"},{"location":"examples/#falsification-example","text":"We will run the falsification script found in tltk/experiments/falsification/AT1.py First, we import the python libraries import matlab.engine import sys sys . path . insert ( 1 , '../../' ) import numpy as np import tltk import tltk_mtl as MTL Note that this script requires a matlab installation on the system. In addtion, the matlab python package should be configured. We define the model and simulation parameters: model = 'models/sldemo_autotrans_mod01' model_outputs = [ 'speed' , 'rpm' , 'gear' ] step = 0.05 inp_range = [ 0 , 100 ] simulation_time = 30 opt = [ 'simulink' , step , inp_range , simulation_time , model_outputs ] interpolation = 'pconst' mode = 'cpu_threaded' The specification: r1 = MTL . Predicate ( 'speed' , 1 , 120 ) predicates = [ r1 ] The control points for the input signal: cp_bounds = [( 0 , 100 ) for i in range ( 7 )] Finally, we run the falsification algorithm: root = MTL . Global ( 0 , 20 , r1 ) results = tltk . falsify ( model , interpolation , cp_bounds , predicates , root , opt )","title":"Falsification Example"},{"location":"getting_started/","text":"Getting Started Building TLTk TLTK can be built from source or run through a Docker container. Running through a Docker container is straighforward since the environment and the dependencies are automatically installed. In the following, we provide instructions for both alternatives. Running through Docker (Windows or Linux) Instructions to run the tool using Docker. Install Docker https://docs.docker.com/get-docker/ . In terminal or command proment, enter the following command to pull the TLTk docker image docker pull bardhh/tltk Once the docker image is pulled, a container may be intialized, in interactive mode, with the command: docker run -it --name tltk_cont bardhh/tltk bash Alternatively, to execute a script without entering the container: docker exec -it tltk_cont bash -c 'cd gettingStarted && python hello-tltk-rob.py' Other useful commands To copy a file to the container: docker cp source_file tltk_cont:/usr/src/tltk/destination_file If you have completed these steps, continue to the next section. Pip install (Linux Only) To install tltk with pip3 the command below can be ran in Bash pip3 install --user tltk_mtl If pip3 is not installed the command below will install it on Ubuntu sudo apt install python3-pip Building from Source (Linux Only) Downloading TLTk TLTk is currenlty hosted on bitbucket and is downloaded with the git clone command git clone https://bitbucket.org/versyslab/tltk.git Dependencies for robustness calculation The following section describes how to install TLTk manually. There is a script that will do it automatically; skip to the bottom of the section for instructions on how to use the script Operating System TLTk is tested on Ubuntu linux. It can be installed on any linux distribution, but it is untested. This guide will be focused installing on the Ubuntu distribution of linux. Installing Git Git is needed to download TLTk source. If you do not have git, it can be downloaded with the command: sudo apt install git CPU Compiler TLTk has been tested with the gcc compiler. If gcc is not on your system, it can be installed with: sudo apt install gcc Installing python3 sudo apt install python3 GPU Compiler Warning Not required unless you are using a GPU To compile the gpu code you need the NVCC compiler. This compiler can be found: Here Installing python packages We need to install the needed python repositories. To do this we will use pip3, which we installed in the previous step. The libraries that TLTk need are numpy, scipy, and cython. To install these, you can run the following command: pip3 install --user numpy scipy cython Installing MATLAB for SimuLink model simulations Warning Only needed if planing on using TLTk with simulink Detailed steps can be found here The following two commands need to be executed (depending on the MATLAB version and directory structure) for Linux using python3: cd /usr/local/matlab/extern/engines/python/ python3 setup.py build --build-base = $( mktemp -d ) install Install script There is a script that installs all the needed packages. At the start of the script it runs an apt update and upgrade. The script can be found at tltk/robustness/install.sh Compiling TLTk Once all the dependencies are installed, TLTk needs to be compiled. To do this, there is a Make file in tltk/robustness/make This make file uses GNU make, which can be installed with sudo apt install make To make the gpu code, the make file can be ran like this make gpu Running Your First Script Docker Execute TLTk from Bash/Command Prompt docker exec tltk_cont bash -c 'cd gettingStarted && python hello-tltk-rob.py' Start Interactive Bash Session in TLTk docker exec -it tltk_cont bash Then, you can enter the gettingStarted directory and run the script cd gettingStarted python hello-tltk-rob.py Source Adding TLTk to path If you built TLTk by source, python needs to know where to look to find TLTk. One method is to add the directory to path at run time by using the python sys libary. For example import sys sys . path . insert ( 1 , \u2019 ( path from working directory ) / pytaliro / robustness \u2019 ) import MTL It can also be added to the python path at the startup of a bash instance by adding the following line to your .bashrc and restarting the bash instance. export PYTHONPATH =( path from root ) /tltk/robustness: $PYTHONPATH Below is a simple test script to check your setup of TLTk #import sys #uncomment if not using export statment for bash #sys.path.insert(1, 'robustness') #uncomment if not using export for bash #import MTL as MTL #Uncomment if .bashrc was eddited import tltk_mtl as MTL #This is used if pip3 install was used import numpy as np #predicate definition predicate = MTL . Predicate ( 'example data' , 1 , 1 ) #signal and time stamps signal = { 'example data' : np . array ([ 95 , 96 , 97 , 96 , 95 ], dtype = np . float32 )} time_stamps = np . array ([ 0 , . 5 , . 7 , . 8 , 1 ], dtype = np . float32 ) #calculate predicate and print results print ( predicate . eval_interval ( signal , time_stamps ))","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"getting_started/#building-tltk","text":"TLTK can be built from source or run through a Docker container. Running through a Docker container is straighforward since the environment and the dependencies are automatically installed. In the following, we provide instructions for both alternatives.","title":"Building TLTk"},{"location":"getting_started/#running-through-docker-windows-or-linux","text":"Instructions to run the tool using Docker. Install Docker https://docs.docker.com/get-docker/ . In terminal or command proment, enter the following command to pull the TLTk docker image docker pull bardhh/tltk Once the docker image is pulled, a container may be intialized, in interactive mode, with the command: docker run -it --name tltk_cont bardhh/tltk bash Alternatively, to execute a script without entering the container: docker exec -it tltk_cont bash -c 'cd gettingStarted && python hello-tltk-rob.py' Other useful commands To copy a file to the container: docker cp source_file tltk_cont:/usr/src/tltk/destination_file If you have completed these steps, continue to the next section.","title":"Running through Docker (Windows or Linux)"},{"location":"getting_started/#pip-install-linux-only","text":"To install tltk with pip3 the command below can be ran in Bash pip3 install --user tltk_mtl If pip3 is not installed the command below will install it on Ubuntu sudo apt install python3-pip","title":"Pip install (Linux Only)"},{"location":"getting_started/#building-from-source-linux-only","text":"","title":"Building from Source (Linux Only)"},{"location":"getting_started/#downloading-tltk","text":"TLTk is currenlty hosted on bitbucket and is downloaded with the git clone command git clone https://bitbucket.org/versyslab/tltk.git","title":"Downloading TLTk"},{"location":"getting_started/#dependencies-for-robustness-calculation","text":"The following section describes how to install TLTk manually. There is a script that will do it automatically; skip to the bottom of the section for instructions on how to use the script","title":"Dependencies for robustness calculation"},{"location":"getting_started/#operating-system","text":"TLTk is tested on Ubuntu linux. It can be installed on any linux distribution, but it is untested. This guide will be focused installing on the Ubuntu distribution of linux.","title":"Operating System"},{"location":"getting_started/#installing-git","text":"Git is needed to download TLTk source. If you do not have git, it can be downloaded with the command: sudo apt install git","title":"Installing Git"},{"location":"getting_started/#cpu-compiler","text":"TLTk has been tested with the gcc compiler. If gcc is not on your system, it can be installed with: sudo apt install gcc","title":"CPU Compiler"},{"location":"getting_started/#installing-python3","text":"sudo apt install python3","title":"Installing python3"},{"location":"getting_started/#gpu-compiler","text":"Warning Not required unless you are using a GPU To compile the gpu code you need the NVCC compiler. This compiler can be found: Here","title":"GPU Compiler"},{"location":"getting_started/#installing-python-packages","text":"We need to install the needed python repositories. To do this we will use pip3, which we installed in the previous step. The libraries that TLTk need are numpy, scipy, and cython. To install these, you can run the following command: pip3 install --user numpy scipy cython","title":"Installing python packages"},{"location":"getting_started/#installing-matlab-for-simulink-model-simulations","text":"Warning Only needed if planing on using TLTk with simulink Detailed steps can be found here The following two commands need to be executed (depending on the MATLAB version and directory structure) for Linux using python3: cd /usr/local/matlab/extern/engines/python/ python3 setup.py build --build-base = $( mktemp -d ) install","title":"Installing MATLAB for SimuLink model simulations"},{"location":"getting_started/#install-script","text":"There is a script that installs all the needed packages. At the start of the script it runs an apt update and upgrade. The script can be found at tltk/robustness/install.sh","title":"Install script"},{"location":"getting_started/#compiling-tltk","text":"Once all the dependencies are installed, TLTk needs to be compiled. To do this, there is a Make file in tltk/robustness/make This make file uses GNU make, which can be installed with sudo apt install make To make the gpu code, the make file can be ran like this make gpu","title":"Compiling TLTk"},{"location":"getting_started/#running-your-first-script","text":"","title":"Running Your First Script"},{"location":"getting_started/#docker","text":"","title":"Docker"},{"location":"getting_started/#execute-tltk-from-bashcommand-prompt","text":"docker exec tltk_cont bash -c 'cd gettingStarted && python hello-tltk-rob.py'","title":"Execute TLTk from Bash/Command Prompt"},{"location":"getting_started/#start-interactive-bash-session-in-tltk","text":"docker exec -it tltk_cont bash Then, you can enter the gettingStarted directory and run the script cd gettingStarted python hello-tltk-rob.py","title":"Start Interactive Bash Session in TLTk"},{"location":"getting_started/#source","text":"","title":"Source"},{"location":"getting_started/#adding-tltk-to-path","text":"If you built TLTk by source, python needs to know where to look to find TLTk. One method is to add the directory to path at run time by using the python sys libary. For example import sys sys . path . insert ( 1 , \u2019 ( path from working directory ) / pytaliro / robustness \u2019 ) import MTL It can also be added to the python path at the startup of a bash instance by adding the following line to your .bashrc and restarting the bash instance. export PYTHONPATH =( path from root ) /tltk/robustness: $PYTHONPATH Below is a simple test script to check your setup of TLTk #import sys #uncomment if not using export statment for bash #sys.path.insert(1, 'robustness') #uncomment if not using export for bash #import MTL as MTL #Uncomment if .bashrc was eddited import tltk_mtl as MTL #This is used if pip3 install was used import numpy as np #predicate definition predicate = MTL . Predicate ( 'example data' , 1 , 1 ) #signal and time stamps signal = { 'example data' : np . array ([ 95 , 96 , 97 , 96 , 95 ], dtype = np . float32 )} time_stamps = np . array ([ 0 , . 5 , . 7 , . 8 , 1 ], dtype = np . float32 ) #calculate predicate and print results print ( predicate . eval_interval ( signal , time_stamps ))","title":"Adding TLTk to path"}]}